[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
hook_post_source = '''
let g:neosnippet#snippets_directory='~/.config/nvim/snip'

if has('conceal')
    set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neocomplete'
if = 'has("lua")'
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
let g:deoplete#omni_patterns = {}
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'Rip-Rip/clang_complete'
on_i = 1
on_ft = 'cpp'
hook_source = '''
 " path to directory where library can be found
 "let g:clang_library_path='/usr/lib/clang'
 " or path directly to the library file
 let g:clang_library_path='/usr/lib/libclang.so.3.9'
 let g:clang_complete_auto = 0
 let g:clang_auto_select = 0
 let g:clang_omnicppcomplete_compliance = 0
 let g:clang_make_default_keymappings = 0
 let g:clang_use_library = 1
'''


[[plugins]]
repo = 'osyo-manga/vim-monster'
on_i = 1
on_ft = 'ruby'
hook_post_source = '''
let g:monster#completion#rcodetools#backend = "async_rct_complete"
let g:deoplete#omni_patterns.ruby =  ['[^. *\t]\.\w*', '\h\w*::']
let g:deoplete#sources#omni#input_patterns = {
\   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\ }
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
depends = ['open-browser.vim']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
hook_source = '''
au BufRead,BufNewFile *.toml set filetype=toml
'''

[[plugins]]
repo = 'lepture/vim-jinja'
on_ft = 'jinja'
hook_source = '''
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja
'''

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
on_i = 1

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
on_i = 1
hook_source = '''
" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'
on_i = 1
hook_source = '''
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_indent_if = 3
let g:haskell_indent_case = 2
let g:haskell_indent_let = 4
let g:haskell_indent_where = 6
let g:haskell_indent_do = 3
let g:haskell_indent_in = 1
let g:haskell_indent_guard = 2
'''
